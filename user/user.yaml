openapi: 3.0.3
info:
  title: User Service API
  description: API for managing users, bookings, and movies in a user service.
  version: 1.0.0
servers:
  - url: http://localhost:3203
    description: Local server

paths:
  /:
    get:
      summary: Home
      description: Displays a welcome message for the User Service.
      responses:
        '200':
          description: A welcome message in HTML format.
          content:
            text/html:
              schema:
                type: string

  /users:
    get:
      summary: Get all users
      description: Retrieves a list of all users.
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{userid}/bookings:
    get:
      summary: Get bookings for a user
      description: Retrieves all bookings for a specific user.
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of bookings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: User or bookings not found.

    post:
      summary: Add booking for a user
      description: Adds a booking for a specific user.
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                movieid:
                  type: string
      responses:
        '200':
          description: Booking successfully added.
        '404':
          description: Movie or showtime not found.
        '409':
          description: Booking already exists.
        '400':
          description: Invalid input.

  /users/{userid}/bookings/{date}:
    get:
      summary: Get user bookings by date
      description: Retrieves bookings for a user on a specific date.
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
        - name: date
          in: path
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Bookings found for the given date.
        '404':
          description: User or bookings not found for the specified date.

  /users/{userid}/movies:
    get:
      summary: Get movies for a user
      description: Retrieves all movies booked by a user.
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of movies booked by the user.
        '404':
          description: User or movies not found.

  /users/{userid}/bookingsbytitle:
    post:
      summary: Add booking for a user by movie title
      description: Adds a booking for a user based on the movie title.
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                title:
                  type: string
      responses:
        '200':
          description: Booking successfully added by title.
        '404':
          description: Movie not found.

  /users/movies/{movieid}:
    get:
      summary: Get movie details by ID
      description: Retrieves details of a movie by its ID.
      parameters:
        - name: movieid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Movie details retrieved successfully.
        '400':
          description: Movie ID not found.

    post:
      summary: Add a new movie by ID
      description: Adds a new movie to the collection.
      parameters:
        - name: movieid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '200':
          description: Movie added successfully.
        '409':
          description: Movie ID already exists.

    delete:
      summary: Delete a movie by ID
      description: Deletes a movie from the collection by its ID.
      parameters:
        - name: movieid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Movie deleted successfully.
        '400':
          description: Movie ID not found.

  /users/movies/{movieid}/rate/{rate}:
    put:
      summary: Update movie rating by ID
      description: Updates the rating of a movie by its ID.
      parameters:
        - name: movieid
          in: path
          required: true
          schema:
            type: string
        - name: rate
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Movie rating updated successfully.
        '201':
          description: Movie ID not found.

  /users/moviesbytitle:
    get:
      summary: Get movie details by title
      description: Retrieves details of a movie by its title.
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Movie details retrieved successfully.
        '400':
          description: Movie title not found.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string

    Booking:
      type: object
      properties:
        userid:
          type: string
        dates:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              movies:
                type: array
                items:
                  type: string

    Movie:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        rating:
          type: number
          format: float
